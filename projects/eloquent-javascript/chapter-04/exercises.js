////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step = 1) {
  let array = [];
  if(start < end){
    if(step > 0){
     for(let i = start; i <= end; i += step){
        array.push(i);
      }
    }
  } else if(start > end){
      if(step < 0){
        for(let x = start; x >= end; x+= step){
          array.push(x);
        }
      }
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let total = 0;
  	for(let i = 0; i < array.length; i++){
    	total += array[i];
    }
  	return total;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array){
	let newArray = [];
  	for(let i = array.length - 1; i >= 0; i--){
    	newArray.push(array[i]);
    }
  	return newArray;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  let reversed = [];
    for(let i = array.length - 1; i >= 0; i--){
      reversed.push(array[i])
    }
    for(let x = 0; x < array.length; x++){
      array[x] = reversed[x];
    }
    return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array){
  let rest = null;
  for(let i = array.length - 1; i >= 0; i--){
    rest = {value: array[i], rest: rest};
  }
  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, output=[]){
  //base
  if(list === null){
    return output;
  }
  //recursion
  output.push(list.value);
  return listToArray(list.rest, output)
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list) {
  return {value: element, rest: list};
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
  //base
  if(!list){
    return undefined;
  }
  if(n === 0){
    return list.value;
  }
  //recursion
  return nth(list.rest, n - 1);
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
//determine if BOTH x and y are not objects
  if(typeof x !== 'object' && typeof x !== 'object'){
    return x === y;
  }
  //determine if one of the values is still not an object
  if(typeof x !== 'object' || typeof y !== 'object'){
    return false;
  }
  let xKeys = Object.keys(x); //['a']
  let yKeys = Object.keys(y);//['a', 'b']

  if(xKeys.length !== yKeys.length){
    return false;
  }
  for(let i = 0; i < xKeys.length; i++){
    if(!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[xKeys[i]])){ //x['a'], y['a']
      return false;
    }
  }
  return true;
}

deepEqual({a: 1}, {a: 1})
////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
